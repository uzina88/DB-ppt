SELECT CONCAT('A', '-', 'B') AS a;

-- LIKE 사용할 경우  
SELECT *
FROM tb_student_info
WHERE addr LIKE '%중구%';

-- LIKE CONCAT 사용할 경우  
SELECT *
FROM tb_student_info
WHERE addr LIKE CONCAT('%', student_school_area,'%')
AND student_school_area = '중구';

-- 문자 변경할 경우
SELECT REPLACE('Hello World', 'World', 'MySQL');

-- 문자열 지정한 길이만큼 출력 
SELECT SUBSTRING('문자열내에서 지정한 시작부분부터 길이 값 만큼 반환', 8, 3);
SELECT * FROM tb_student_info;

-- 실습 7.  tb_student_info 테이블의 학생정보를 OO고등학교_O학년_OOO의 형태로 출력하시오. 
SELECT CONCAT(student_school, '_', student_grade, '학년_', student_name) AS 학생정보
FROM tb_student_info;

-- 실습 8. 본인 휴대전화번호를 010-0000-000 에서 –을 공백으로 변환하여 출력하시오.
SELECT REPLACE('010-3308-7940', '-', ' ');

-- 실습 9. 본인 휴대전화번호의 가운데 4자리만 출력하시오. 
SELECT SUBSTRING('010-3308-7940', 5, 10);

-- 실습 10. 본인 휴대전화번호에서 010- 을 제외한 나머지 번호를 출력하시오. 
SELECT REPLACE('010-3308-7940', '010-', ' ');
SELECT RIGHT('010-3308-7940', 9);

-- 실습 11. 본인 휴대전화번호에서 앞 3자리, 중간 4자리, 마지막 4자리를 추출한 후 문자열을 합쳐서(CONCAT사용) 010-0000-0000의 형태로 출력하시오. 
SELECT CONCAT(SUBSTRING('010-3308-7940', 1, 3), '-', SUBSTRING('010-3308-7940', 5, 4), '-', SUBSTRING('010-3308-7940', 10, 4)) AS '핸드폰번호';

-- 현재 날짜/시간 
SELECT NOW();
SELECT current_timestamp();

SELECT * FROM data_insert_history;

INSERT INTO data_insert_history(table_name)
value('test');

SELECT CURDATE();
SELECT CURTIME();
SELECT HOUR(NOW());

SELECT DATEDIFF(NOW(), '2024-07-15'), DATEDIFF('2024-07-15', NOW());
SELECT DATEDIFF(NOW(), '2024-07-18');

-- 얼마나 남았는지 
SELECT TIMEDIFF('2024-07-18 11:30:00', NOW());
-- 30일 뒤에
SELECT DATE_add(NOW(), interval 30 day);
-- 지정 날짜/시간 셋팅
SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');

SELECT DATEDIFF(NOW(), '1989-02-28')AS '살아온 일수';
SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s') AS '오늘 날짜/시간';

SELECT IF(student_grade=1,'신입생','재학생')
FROM tb_student_info;

SELECT
	CASE WHEN student_grade = 1 THEN '신입생'
		 WHEN student_grade = 2 THEN '재학생'
         ELSE '졸업생' END
FROM tb_student_info;

-- null 값 대체
SELECT IFNULL(NULL, 'Hello World');

-- 실습 14. tb_score 테이블에서 성적이 90점 이상이면 ‘우수’ , 아니라면 ‘보통’이 출력되도록 하시오.
SELECT *, IF(score_point >= 90,'우수','보통') AS 우수여부
FROM tb_score;

-- 실습 15. tb_score 테이블에서 성적이 70점~79점 '노력 필요', 80~89점 '보통', 90~100점 '우수' 보이도록 출력하시오.
SELECT score_point, score_subject,
	CASE WHEN score_point BETWEEN 90 AND 100 THEN '우수'
		 WHEN score_point BETWEEN 80 AND 89 THEN '보통'
         ELSE '노력 필요' END AS '우수여부'
FROM tb_score;

SELECT score_point, score_subject,
	CASE WHEN score_point >= 90 THEN '우수'
		 WHEN score_point >= 80 THEN '보통'
         ELSE '노력 필요' END AS '우수여부'
FROM tb_score;

SELECT * FROM tb_score;
SELECT * FROM tb_student_info;

-- 1. tb_student_info 테이블의 데이터를 조회하면서, 서브쿼리를 이용하여 국어, 영어, 수학 점수를 같이 조회하시오.
SELECT student.student_name, 
	   student.student_grade,
       (SELECT score.score_point 
       FROM tb_score score
       WHERE score.score_subject = '국어'
       AND score.student_id = student.student_id) AS '국어',
	   (SELECT score.score_point 
       FROM tb_score score
       WHERE score.score_subject = '영어'
       AND score.student_id = student.student_id) AS '영어',
	   (SELECT score.score_point 
       FROM tb_score score
       WHERE score.score_subject = '수학'
       AND score.student_id = student.student_id) AS '수학'
FROM tb_student_info student;

-- 2. 서구에 있는 고등학교 1학년 학생들의 평균점수를 조회하시오.(tb_student_info 테이블 사용)
SELECT st.student_name, st.student_grade, st.student_school, st.student_school_area,
		(SELECT AVG(sc.score_point)
		FROM tb_score sc
		WHERE sc.student_id = st.student_id) AS '평균점수'
FROM tb_student_info st
WHERE st.addr LIKE '%서구%'
AND st.student_grade = 1;

-- 3. 1학년 학생들의 학교 정보를 조회하시오.(tb_student_info_test 테이블 사용)
SELECT st.student_name, st.student_grade,
		(SELECT si.school_area
		FROM tb_school_info si
		WHERE si.school_idx = st.school_idx) AS school_area,
        (SELECT si.school_name
		FROM tb_school_info si
		WHERE si.school_idx = st.school_idx) AS school_name,
        (SELECT si.school_addr
		FROM tb_school_info si
		WHERE si.school_idx = st.school_idx) AS school_addr,
        (SELECT si.school_phone
		FROM tb_school_info si
		WHERE si.school_idx = st.school_idx) AS school_phone 
FROM tb_student_info_test st
WHERE st.student_grade = 1;

SELECT * FROM tb_score;
SELECT * FROM tb_student_info_test;
SELECT * FROM tb_school_info;

-- 4. 중구에 있는 고등학교 학생들의 정보를 조회하시오.(출력 내용 : 학생이름, 학년, 학교명, 우편번호, 학생주소)
SELECT student.student_name,
	   student.student_grade,
       (SELECT school_name
       FROM tb_school_info
       WHERE school_idx = student.school_idx) AS '학교명',
       student.student_zipcode,
       student.addr
FROM tb_student_info_test student
WHERE student.school_idx in (
	SELECT school_idx
	FROM tb_school_info
	WHERE school_area = '중구'
);

-- 성적테이블의 국어성적을 내림차순으로 정렬하여 순번을 매긴 후, 순번을 오름차순으로 다시 정렬하시오.(상위 10명의 데이터만 출력)
-- 페이징 / 순번
SELECT *
FROM(
SELECT (@ROWNUM:=@ROWNUM+1) AS rnum, score.*
FROM tb_score score, (SELECT @ROWNUM:=0 FROM DUAL) R
WHERE score.score_subject = '국어'
ORDER BY score.score_point asc

) AS T
ORDER BY T.rnum DESC
LIMIT 10 OFFSET 0;

-- 5. 중구에 있는 고등학교 학생들 중 평균성적이 80점 미만인 학생 정보를 출력하시오.
SELECT student.student_name,
	   (SELECT school_name
       FROM tb_school_info
       WHERE school_idx = student.school_idx) AS '학교명',
	   student.student_grade,
       (SELECT AVG(score_point)
       FROM tb_score
       WHERE student_id = student.student_id) AS '평균성적'
FROM tb_student_info_test student
WHERE student.school_idx in(
	SELECT school_idx
    FROM tb_school_info
    WHERE school_area = '중구'
)
AND student.student_id in(
	SELECT student_id
	FROM tb_score
	GROUP BY student_id
	HAVING AVG(score_point) < 80
);





